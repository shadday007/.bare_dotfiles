" ~/.vimrc
" Try to load minpac.
packadd minpac

if !exists('*minpac#init')
  " minpac is not available.

  " Settings for plugin-less environment.
  " ...
else
  " minpac is available.
  " init with verbosity 3 to see minpac work
  call minpac#init({'verbose': 3})
  call minpac#add('k-takata/minpac', {'type': 'opt'})

  " Additional plugins here.

  " File Explorer
  call minpac#add('scrooloose/nerdtree')
  call minpac#add('jistr/vim-nerdtree-tabs')
  call minpac#add('ryanoasis/vim-devicons')
  call minpac#add('Xuyuanp/nerdtree-git-plugin')
  call minpac#add('tiagofumo/vim-nerdtree-syntax-highlight')

  " Color Scheme
  "call minpac#add('whatyouhide/vim-gotham')
  "call minpac#add('crusoexia/vim-monokai')
  "call minpac#add('nanotech/jellybeans.vim')
  "call minpac#add('nightsense/snow')
  call minpac#add('jacoborus/tender.vim')
  "call minpac#add('chriskempson/base16-vim')
  
  " Status Line
  call minpac#add('vim-airline/vim-airline')
  call minpac#add('vim-airline/vim-airline-themes')
  
  " ...
  " minpac utility commands
  command! PackUpdate call minpac#update()
  command! PackClean call minpac#clean()
  command! PackStatus call minpac#status()

  " Plugin settings here.
  
  " vim-airline
  let g:airline_powerline_fonts = 1  
  " set airline theme
   let g:airline_theme = 'tender'
  "let g:airline_theme='jellybeans'
  let g:airline#extensions#tabline#enabled = 1
  let g:airline#extensions#tabline#buffer_nr_show = 1
  let g:airline#extensions#tabline#formatter = 'unique_tail_improved'

  "colorsheme

  if strftime('%H') >= 18 && strftime('%H') < 19
    set background=light
"    let g:airline_theme='snow_light'
  else
    set background=dark
"    let g:airline_theme='snow_dark'
  endif
  "colorscheme snow
  "colorscheme jellybeans
  "colorscheme monokai
  "colorscheme gotham
  colorscheme tender
  "colorscheme base16-default-dark
let base16colorspace=25  
  
  
" <Nerdtree>-------------------{
    ">> Basic settings
        let g:NERDTreeChDirMode = 2  "Change current folder as root
        autocmd BufEnter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) |cd %:p:h |endif

    ">> UI settings
        let NERDTreeQuitOnOpen=1   " Close NERDtree when files was opened
        let NERDTreeMinimalUI=1    " Start NERDTree in minimal UI mode (No help lines)
        let NERDTreeDirArrows=1    " Display arrows instead of ascii art in NERDTree
        let NERDTreeChDirMode=2    " Change current working directory based on root directory in NERDTree
        let g:NERDTreeHidden=1     " Don't show hidden files
        let NERDTreeWinSize=30     " Initial NERDTree width
        let NERDTreeAutoDeleteBuffer = 1  " Auto delete buffer deleted with NerdTree
        "let NERDTreeShowBookmarks=0   " Show NERDTree bookmarks
        let NERDTreeIgnore = ['\.pyc$', '\.swp', '\.swo', '__pycache__']   " Hide temp files in NERDTree
        "let g:NERDTreeShowLineNumbers=1  " Show Line Number
    " Open Nerdtree when there's no file opened
        autocmd vimenter * if !argc()|NERDTree|endif
    " Or, auto-open Nerdtree
        "autocmd vimenter * NERDTree
    " Close NERDTree when there's no other windows
        autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
    " Customize icons on Nerdtree
        let g:NERDTreeDirArrowExpandable = '▸'
        let g:NERDTreeDirArrowCollapsible = '▾'
        let g:NERDTreeStatusline = ''
    " Toggle
        nnoremap <silent> <C-b> :NERDTreeToggle<CR>

    ">> NERDTREE-GIT
        " Special characters
    let g:NERDTreeIndicatorMapCustom = { 
        \ "Modified"  : "✹",
        \ "Staged"    : "✚",
        \ "Untracked" : "✭",
        \ "Renamed"   : "➜",
        \ "Unmerged"  : "═",
        \ "Deleted"   : "✖",
        \ "Dirty"     : "✗",
        \ "Clean"     : "✔︎",
        \ 'Ignored'   : '☒',
        \ "Unknown"   : "?"
    \ }

    ">> NERDTree-Tabs
        "let g:nerdtree_tabs_open_on_console_startup=1 "Auto-open Nerdtree-tabs on VIM enter
    ">> Nerdtree-devicons
        if exists("g:loaded_webdevicons")
           call webdevicons#refresh()
        endif
        "set guifont=DroidSansMono_Nerd_Font:h11
    ">> Nerdtree-syntax-highlighting
        "let g:NERDTreeDisableFileExtensionHighlight = 1
        "let g:NERDTreeDisableExactMatchHighlight = 1
        "let g:NERDTreeDisablePatternMatchHighlight = 1
        "let g:NERDTreeFileExtensionHighlightFullName = 1
        "let g:NERDTreeExactMatchHighlightFullName = 1
        "let g:NERDTreePatternMatchHighlightFullName = 1
        "let g:NERDTreeHighlightFolders = 1 " enables folder icon highlighting using exact match
        "let g:NERDTreeHighlightFoldersFullName = 1 " highlights the folder name
        "let g:NERDTreeExtensionHighlightColor = {} " this line is needed to avoid error
" }



  " ...
endif

" Common settings here.
"
syntax on
filetype plugin indent on


" enable plugins of vim
runtime macros/matchit.vim


    
set nocompatible

"The modelines bit prevents some security exploits"
set modelines=0

"my tab settings
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab	

set encoding=utf-8
set scrolloff=3
set autoindent
set showmode
set showcmd
set hidden
set wildmenu
set wildmode=longest,list
set visualbell
set cursorline
set ttyfast
set ruler
set backspace=indent,eol,start
set laststatus=2

"relativenumber changes Vim’s line number column to display 
"how far away each line is from the current one
set relativenumber

"undofile tells Vim to create <FILENAME>.un~ files whenever you edit a file
set undofile

"the <leader> key:
let mapleader = ","

"ignorecase and smartcase together make Vim deal with case-sensitive search intelligently"
set ignorecase
set smartcase

"gdefault applies substitutions globally on lines. For example, 
"instead of :%s/foo/bar/g you just type :%s/foo/bar/.
"set gdefault

"incsearch, showmatch and hlsearch work together to highlight search results"
set incsearch
set showmatch
set hlsearch

"The next section makes Vim handle long lines correctly
set wrap
set textwidth=79
set formatoptions=qrn1
set colorcolumn=85

"This makes Vim show invisible characters with the same characters that TextMate uses
set list
set listchars=tab:▸\ ,eol:¬

"Invisible character colors 
highlight NonText guifg=#4a4a59
highlight SpecialKey guifg=#4a4a59 

" Shortcut to rapidly toggle `set list`
nmap <leader>l :set list!<CR>

"Quicker Escaping
inoremap jj <ESC>

"New Vim users will want the following lines 
"to teach them to do things right
nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>
inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>
nnoremap j gj
nnoremap k gk
nnoremap <C-p> :<C-u>FZF<CR>

nnoremap <leader>ev :e ~/.vimrc<CR>  "Edit .vimrc
nnoremap <leader>sv :so ~/.vimrc<CR> "Source .vimrc

